深信服(电话一面)
1. GIL了解吗
2. GIL锁产生问题怎么优化？(CPU密集型任务，IO密集型任务处理)
3. 类对象的继承了解吗，如果一个类继承了多个类，被继承的类中有相同的方法，那么这个类调用这个方法会使用哪个继承类中的方法？
4. python内存优化有了解吗？内存回收机制有了解吗？
5. 怎么翻转一个字符串？[::-1]
6. 项目中数量量情况，应对这些情况，mysql是怎么部署的？(主从同步，读写分离有用到吗？)
7. mysql是怎么优化的？ 根据什么来建索引，为什么索引速度快？
8. redis hash tabel怎么解决hash冲突？
9. linux 用户和用户组管理？文件权限？ -（代表类型）×××（所有者）×××（组用户）×××（其他用户）
10. linux下看堆栈信息调试bug
如何排查服务器 cpu 100%问题？

top -c 找到最消耗 cpu 的进程
top -Hp pid 显示一个进程的线程信息列表
printf "%xn" 10804, 将线程PID转化为16进制
查看堆栈，找到线程在干嘛jstack 20136 | grep '0x2a34' -C5 -color。pstack/jstack/grep
使用strace跟踪执行过程中的系统调用
跟踪pid为12345的进程中所有线程的read和write系统调用，输出字符串的长度限制为1024：
strace -s 1024 -f -e trace=read,write -p 12345


深信服(电话二面)
1. 讲讲你的项目中遇到的难点？
2. 程序上线后有没有遇到什么bug？怎么解决的
3. 上线后异常是怎么监控的，如果让你设计监控系统你会怎么做？
4. 服务是怎么部署的，怎么实现扩容？
5. 用什么做负载均衡，负载均衡的算法了解吗(DNS/nginx)?
6. websocket是怎么实现的，django—channels的底层实现是怎样的？
7. mysql主从复制是怎么实现的，原理了解吗?
8. linux的软链接，硬链接了解吗?
9. linux的进程间通信了解吗?
10. linux的僵尸进程了解吗？
11. linux的文件系统了解吗?
12. linux的分⻚存储管理了解吗？内存映射了解吗?怎么实现的
13. linux的内存抖动了解吗？


1. 一条请求进来，是先修改缓存还是先修改数据库。
	类似于分布式事务问题，强一致性，最终一致性(写-删除缓存，修改数据库，读-读取数据库，加载缓存)
	两阶段提交协议 2PC
	三阶段提交协议 3PC
	
2. CDN了解吗
3. 消息队列了解吗
4. mysql主从同步时延参数或者指标有哪些。
5. MySQL的查询需要遍历几次B+树，理论上需要几次磁盘I/O？
	这里我们先假设B+树高为2，即存在一个根节点和若干个叶子节点，那么这棵B+树的存放总记录数为：根节点指针数*单个叶子节点记录行数。
	上文我们已经说明单个叶子节点（页）中的记录数=16K/1K=16。（这里假设一行记录的数据大小为1k，实际上现在很多互联网业务数据记录大小通常就是1K左右）。
	那么现在我们需要计算出非叶子节点能存放多少指针，其实这也很好算，我们假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，这样一共14字节，我们一个页中能存放多少这样的单元，其实就代表有多少指针，即16384/14=1170。那么可以算出一棵高度为2的B+树，能存放1170*16=18720条这样的数据记录。
	根据同样的原理我们可以算出一个高度为3的B+树可以存放：1170*1170*16=21902400条这样的记录。所以在InnoDB中B+树高度一般为1-3层，它就能满足千万级的数据存储。在查找数据时 一次页的查找代表一次IO， 所以通过主键索引查询通常 只需要1-3次IO操作 即可查找到数据



常见折磨类型面试题：
1. 职业规划是怎样的？
2. 对于同一个方案领导的要求你却有不同的想法你会怎么做？
3. 如果你被指派去做产品经理你会怎么做？
4. 还有什么问题想咨询的


hr 折磨问题：
https://zhuanlan.zhihu.com/p/27564382


保险是多少？税是多少？津贴有哪些、饭补、住房补贴、交通补？奖金？项目奖金有吗？年终奖有吗？其他福利有吗？涨薪机制？晋升机制？

套路一，打性价比，聊自己能给公司/业务产生的价值远高于此价格。
套路二，打时间差，谈自己在当前公司因表现出众，有涨薪的机会（只是得等几个月啊亲），所以其实我跳槽压根就没想着涨工资，只是拿了应得（应该涨）的部分好嘛。
套路三，打竞争对手牌，谈自己手中已经有同等水平offer，也正在考虑（所以，看贵司有多大诚意了），并不是哪家薪资高就去哪家，薪资只是其中的一个（最重要的）条件。