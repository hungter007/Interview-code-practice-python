深信服(电话一面)
1. GIL了解吗
2. GIL锁产生问题怎么优化？(CPU密集型任务，IO密集型任务处理)
3. 类对象的继承了解吗，如果一个类继承了多个类，被继承的类中有相同的方法，那么这个类调用这个方法会使用哪个继承类中的方法？
4. python内存优化有了解吗？内存回收机制有了解吗？
5. 怎么翻转一个字符串？[::-1]
6. 项目中数量量情况，应对这些情况，mysql是怎么部署的？(主从同步，读写分离有用到吗？)
7. mysql是怎么优化的？ 根据什么来建索引，为什么索引速度快？
8. redis hash tabel怎么解决hash冲突？
9. linux 用户和用户组管理？文件权限？ -（代表类型）×××（所有者）×××（组用户）×××（其他用户）
10. linux下看堆栈信息调试bug
如何排查服务器 cpu 100%问题？

top -c 找到最消耗 cpu 的进程
top -Hp pid 显示一个进程的线程信息列表
printf "%xn" 10804, 将线程PID转化为16进制
查看堆栈，找到线程在干嘛jstack 20136 | grep '0x2a34' -C5 -color。pstack/jstack/grep
使用strace跟踪执行过程中的系统调用
跟踪pid为12345的进程中所有线程的read和write系统调用，输出字符串的长度限制为1024：
strace -s 1024 -f -e trace=read,write -p 12345


深信服(电话二面)
1. 讲讲你的项目中遇到的难点？
2. 程序上线后有没有遇到什么bug？怎么解决的
3. 上线后异常是怎么监控的，如果让你设计监控系统你会怎么做？
4. 服务是怎么部署的，怎么实现扩容？
5. 用什么做负载均衡，负载均衡的算法了解吗(DNS/nginx)?
6. websocket是怎么实现的，django—channels的底层实现是怎样的？
7. mysql主从复制是怎么实现的，原理了解吗?
8. linux的软链接，硬链接了解吗?
9. linux的进程间通信了解吗?
10. linux的僵尸进程了解吗？
11. linux的文件系统了解吗?
12. linux的分⻚存储管理了解吗？内存映射了解吗?怎么实现的
13. linux的内存抖动了解吗？


1. 一条请求进来，是先修改缓存还是先修改数据库。
	类似于分布式事务问题，强一致性，最终一致性(写-删除缓存，修改数据库，读-读取数据库，加载缓存)
	两阶段提交协议 2PC
	三阶段提交协议 3PC
	
2. CDN了解吗
3. 消息队列了解吗
4. mysql主从同步时延参数或者指标有哪些。
5. MySQL的查询需要遍历几次B+树，理论上需要几次磁盘I/O？
	这里我们先假设B+树高为2，即存在一个根节点和若干个叶子节点，那么这棵B+树的存放总记录数为：根节点指针数*单个叶子节点记录行数。
	上文我们已经说明单个叶子节点（页）中的记录数=16K/1K=16。（这里假设一行记录的数据大小为1k，实际上现在很多互联网业务数据记录大小通常就是1K左右）。
	那么现在我们需要计算出非叶子节点能存放多少指针，其实这也很好算，我们假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，这样一共14字节，我们一个页中能存放多少这样的单元，其实就代表有多少指针，即16384/14=1170。那么可以算出一棵高度为2的B+树，能存放1170*16=18720条这样的数据记录。
	根据同样的原理我们可以算出一个高度为3的B+树可以存放：1170*1170*16=21902400条这样的记录。所以在InnoDB中B+树高度一般为1-3层，它就能满足千万级的数据存储。在查找数据时 一次页的查找代表一次IO， 所以通过主键索引查询通常 只需要1-3次IO操作 即可查找到数据



常见折磨类型面试题：
1. 职业规划是怎样的？
2. 对于同一个方案领导的要求你却有不同的想法你会怎么做？
3. 如果你被指派去做产品经理你会怎么做？
4. 还有什么问题想咨询的


hr 折磨问题：
https://zhuanlan.zhihu.com/p/27564382


保险是多少？税是多少？津贴有哪些、饭补、住房补贴、交通补？奖金？项目奖金有吗？年终奖有吗？其他福利有吗？涨薪机制？晋升机制？

套路一，打性价比，聊自己能给公司/业务产生的价值远高于此价格。
套路二，打时间差，谈自己在当前公司因表现出众，有涨薪的机会（只是得等几个月啊亲），所以其实我跳槽压根就没想着涨工资，只是拿了应得（应该涨）的部分好嘛。
套路三，打竞争对手牌，谈自己手中已经有同等水平offer，也正在考虑（所以，看贵司有多大诚意了），并不是哪家薪资高就去哪家，薪资只是其中的一个（最重要的）条件。

1. celery django redis 
   https://www.cnblogs.com/guanfuchang/p/6561034.html
   
   1.添加celery相关配置信息,配置celery ,setting关联celery,配置celery缓存数据库redis
   2.创建异步运行任务tasks @shared_task
   3.视图中添加func.delay(data)
   4. supervisor 代理启动 celery -A mysite.mycelery worker -l info
   
2. django+uwsgi+daphne+supervisor生产环境部署

WSGI是基于HTTP协议模式的，不支持WebSocket，而ASGI的诞生则是为了解决Python常用的WSGI不支持当前Web开发中的一些新的协议标准。同时，ASGI对于WSGI原有的模式的支持和WebSocket的扩展，即ASGI是WSGI的扩展

  daphne：channels的接口服务(asgi)
  supervisor： 进程管理工具
  
  
3. 数据库读写分离测试
   mysql主从复制配置：http://blog.perass.com/blog/post/micktiger/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E
   
4. 服务器架构：https://learnku.com/articles/24362


5. logging 错误日志系统

6. channels websocket 使用类变量共享房间信息


项目时间：2016-03到2011-10

项目名称：基于django的QQ小程序你画我猜后台实现

项目描述：
项目介绍
该项目为了QQ小程序你画我猜后台实现，基于django使用mysql,redis作为数据库使用uwsgi+daphne+nginx实现服务负载搭建。主要功能为提供题目，用户在画板上作画，调用AI识别接口判断用户画作是否为题目。具体模块分为单人作战，好友同玩，随机匹配，排行榜以及道具商城。
我的职责
1.通过django搭建后端框架，连通QQ小程序后台认证系统，提供小程序使用的各种保存画作，查询信息等接口
2.通过django-channels 实现小程序websocket通信以完成多人在线同玩功能。
3.使用nginx+uwsgi+daphne 搭建两台负载均衡服务器，增加负载能力。
4.使用django-logging作为错误日志系统，捕获后台异常及时处理。
5.使用celery异步执行耗时的写入文件操作，提高接口性能。

项目名称：基于django的美妆SKU管理平台实现

项目描述：
项目介绍
该项目为了美妆SKU管理平台后台实现，基于django使用mysql,uwsgi+nginx实现服务负载搭建。你画我猜主要功能为有Android端IOS端提供美妆SKU数据接口管理SKU后台数据。具体模块分为租户管理，设备管理，美妆SKU管理，日志管理以及提供APP下载地址。
我的职责
1.通过django搭建后端框架，实现租户注册登记，设备管理，美妆SKU查询等接口
2.使用垂直分表方法设计数据库，提高数据检索性能
3.使用nginx+uwsgi 搭建服务器。
4.使用django-logging作为错误日志系统，捕获后台异常及时处理。





1.项目架构图 C++ 2.内存对齐 3.stl的map和unordermap区别、时间复杂度 4.为什么析构函数要是虚的 虚函数表存放在哪 网络 5.webscoket和http的区别 6.流量控制 7.拥塞控制 8.tcp四次挥手流程图 time_wait redis 9.redis的持久化机制AOF和RDB AOF和RDB区别 AOF的重写机制 父子进程 10.redis的主从复制机制 11.跳跃表 linux 12.linux内存管理 段的排序，就是代码段、数据段、BSS、heap、mmp、stack 链接库放在哪个段中 堆和栈的顺序，就是栈是高地址开始 13.缺页异常 mysql 14.聚集索引和非聚集索引结构和区别 B和B+树区别 15.binlog和redolog 16.数据库的事务 数据库的几种隔离级别 17.sql优化 慢查询日志 explain参数 18.算法题：链表的回文性，要求单链表、O(N)时间、O(1)空间


Redis有哪些数据结构？

字符串String、字典Hash、列表List、集合Set、有序集合SortedSet。

如果你是Redis中高级用户，还需要加上下面几种数据结构HyperLogLog、Geo、Pub/Sub。

如果你说还玩过Redis Module，像BloomFilter，RedisSearch，Redis-ML，面试官得眼睛就开始发亮了。

使用过Redis分布式锁么，它是什么回事？

先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。

这时候对方会告诉你说你回答得不错，然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？

这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回答：我记得set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！对方这时会显露笑容，心里开始默念：摁，这小子还不错。

假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？

使用keys指令可以扫出指定模式的key列表。

对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？

这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。

使用过Redis做异步队列么，你是怎么用的？

一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。

如果对方追问可不可以不用sleep呢？list还有个指令叫blpop，在没有消息的时候，它会阻塞住直到消息到来。

如果对方追问能不能生产一次消费多次呢？使用pub/sub主题订阅者模式，可以实现1:N的消息队列。

如果对方追问pub/sub有什么缺点？在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。

如果对方追问redis如何实现延时队列？我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问的这么详细。但是你很克制，然后神态自若的回答道：使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。

到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。

如果有大量的key需要设置同一时间过期，一般需要注意什么？

如果大量的key过期时间设置的过于集中，到过期的那个时间点，redis可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。

Redis如何做持久化的？

bgsave做镜像全量持久化，aof做增量持久化。因为bgsave会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要aof来配合使用。在redis实例重启时，会使用bgsave持久化文件重新构建内存，再使用aof重放近期的操作指令来实现完整恢复重启之前的状态。

对方追问那如果突然机器掉电会怎样？取决于aof日志sync属性的配置，如果不要求性能，在每条写指令时都sync一下磁盘，就不会丢失数据。但是在高性能的要求下每次都sync是不现实的，一般都使用定时sync，比如1s1次，这个时候最多就会丢失1s的数据。

对方追问bgsave的原理是什么？你给出两个词汇就可以了，fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。

Pipeline有什么好处，为什么要用pipeline？

可以将多次IO往返的时间缩减为一次，前提是pipeline执行的指令之间没有因果相关性。使用redis-benchmark进行压测的时候可以发现影响redis的QPS峰值的一个重要因素是pipeline批次指令的数目。

Redis的同步机制了解么？

Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将rdb文件全量同步到复制节点，复制节点接受完成后将rdb镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。

是否使用过Redis集群，集群的原理是什么？

Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。

Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。


redis集群配置：
https://juejin.im/entry/596343056fb9a06bc340ac15
https://www.cnblogs.com/Camiluo/p/10996934.html
重启错误解决方法
解决方法：

1)、将需要新增的节点下aof、rdb等本地备份文件删除；

2)、同时将新Node的集群配置文件删除,即：删除你redis.conf里面cluster-config-file所在的文件；

3)、再次添加新节点如果还是报错，则登录新Node,./redis-cli–h x –p对数据库进行清除：

172.168.63.201:7001>  flushdb      #清空当前数据库